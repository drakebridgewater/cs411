%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Tue Oct 29 15:24:07 2013
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMTT10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter main.dvi -o main.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.10.29:1524
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMTT10
%!PS-AdobeFont-1.1: CMTT10 1.00B
%%CreationDate: 1992 Apr 26 10:42:42
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-4 -235 731 800}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8232429ED8B7CF6A3D879A2D19
38DD5C4467F9DD8C5D1A2000B3A6BF2F25629BAEC199AE8BD4BA6ED9BBF7DABF
D0E153BAB1C17900D4FCE209622ACD19E7C74C2807D0397357ED07AB460D5204
EB3A45B7AC4D106B7303AD8348853032A745F417943F9B4FED652B835AA49727
A8B4117AFF1D4BCE831EB510B6851796D0BE6982B76620CB3CE0C22CACDD4593
F244C14EEC0E5A7C4AC42392F81C01BC4257FE12AF33F4BFEA9108FF11CF9714
4DD6EC70A2C4C1E4F328A1EB25E43525FB1E16C07E28CC359DF61F426B7D41EA
6A0C84DD63275395A503AAE908E1C82D389FD12A21E86999799E7F24A994472E
A10EAE77096709BE0D11AAD24A30D96E15A51D720AFB3B10D2E0AC8DC1A1204B
E8725E00D7E3A96F9978BC19377034D93D080C4391E579C34FF9FC2379CB119F
1E5BBEA91AE20F343C6420BE1E2BD0636B04FCCC0BEE0DC2D56D66F06DB22438
452822CBEAF03EE9EAA8398F276EC0D92A7FB978C17805DB2F4A7DFBA56FD6AF
8670EB364F01DE8FCAFBAF657D68C3A03112915736CEABAA8BA5C0AC25288369
5D49BD891FABEFE8699A0AE3ED85B48ACB22229E15623399C93DE7D935734ADA
DA7A1462C111D44AD53EA35B57E5D0B5FC0B481820E43222DB8EFCD5D30E15F9
BA304FA879392EE0BCC0E1A61E74B3A1FC3A3D170218D7244580C7AA0DC65D19
741FA5FE6F8CBF60250ACC27454BBF0897CA4B909C83A56672958752ED4B5E79
E18660764F155E86F09EFA9F7685F2F5027EC85A775287B30E2069DE4E4D5712
E7D033481A53A2702BA7542C71062173039030CF28D8B9C63B5596A9B42B33E7
D922944A38713383D3648A4AF160A3B0C8F3379BA4372BE2E7EA49AABA75AEEE
C5DDE1D8BF68483C3D21271280ABB91D54CC819680322EAB72E1250A760BC8DC
FF798F2ABFC4F3539392985C4CB324B0007229586D1E0321559F67C057FD7902
194490A4C133DA790FF3BF23A13C2B1B69EEB75950F9106F2BA1E3CA624E401F
4EAED54CEF1697634E212C84ABE55DC2BD7AB0B2DF75975866694BF444F28DA1
C82B0FDF06EA99B3174459E7BF82AD59FD366E775F2BDAA32763ACA990E81B8C
9487BAFDBC794DB95A89AB8A8AFBEA46260E10C300EFE557E716BCBE5A066B29
4B7609AB7675372DCB4340673F34FE18DAE0DBB8B119CE79FA6996244089BF18
1FCA8A360D401719C5FDD4093A2E265AC2F21881EE4A59FF5C5FA95025C49B04
99248DEC8BC4D496F3256DF52DF43E87AD00D2E822B853DF3C8BD16760A91B02
D5E8D679C227DA8E3207EDD00B90A3A4335C6936A3821D250453B717ECB74A61
A2787DEBBC9E018AEEDDBF33A539B8628719272873B0E585F51AD715D5F0701E
97A57C400F062F8CF0A4D858D373293575CCF745507F839154713F4604CCAE28
1D1AA681BAAD986E1F3DDF5AEA23709F997CFA3E08A242DED8CED4A230CED1BB
448CB5C948883CAE49775026600D9BCCC7507B2C2269B8804FD0AC01AC84FFF6
3DCB111BD5CFBBB910D3BC574166E4E9E1859BB12B12679BF886B6031498ABB6
D3F28ED73B010ABB5491C90B724110C7F09E891145B5D8DD0899A2E3F945FDAF
0993317818EB99A8E80923E8E4733C0835161A712E9EAEDA15D504F1213B76B1
584D086C77729931B264E948C4F82514DCF27C6B973377EE3C2FA3158F4A135A
298E7B77AFDAB73FEA2CD240A3FB050A6B25631E10C2DA4065A30828B9746F0F
4558B10027CE47829F948DE390736298E3A6CE703D5BA5BE8B6060942ACF0E30
94BBD42C0A3B5AEBC6E56874FC4ECBA540C7926F2C731520B1034C4C3D6F15AF
10098C395570670CC2C51F2BAE5DA513FB7BD7D7C7E446A66022BCBA9D072304
E6FB8B549C592371326177DE5D8F68846E5022C691C716C166BA7824DCB279A7
7ECE4F38E9F34D71C58EF11F6392377694D08C951351FE7B7309DB7481E9BA8F
26F65EE42BBC4D441A9E1E0DA129188CE479BFB0E69B184BD18CA842645E5CDF
DD0FFC79076371CA1DCC67099486A227DFDD557FFE77A1DE7E5B96CA95A2124A
0992CF23FCF269AE8DDA7A5949F1C778425C08C777C94418D43535BF4FBCD698
5DD80197A2A42BA9BE1E47E3045EAFE7B2F67A513F441CEE0BC6359694C1F69E
09833F1901F3A4C160F727A7C93A22404DE604F38AA6B06400D9BFB36D8BD4A0
E1B1C5ED7B4430D2A3508E4B4D024EC88BB819736F1ACA80FA09FC9A921AE831
73318A04349081A5ED4087879862F81FB6314641489E27DB726FC3327D7E6CC6
1BEA72AE3D91CAE6C159C08E7BDE2C67564D8D226435ABC212E0FC5018D5B72A
06E17EDCF28FBDFBD101F7CE4739D051B0AB1294CC513B42E6F733753334824C
13FD7C25E7A47534DBDE6D09E6AA483C335A5C3D9FAC195191FF9775204A04BF
3DEFE76D8BED7C0BE8DE381C57C899F46BF6C2CAC5C45D4964ACA68F42C75542
A6561A7FDFEB8BADADB71ED4875634C6E517ECD7066C5A7C35B42E20FC0B43F6
97F8E06B88BDF610F40CEE9ED4118BE0538A5F4E6355BA4D37B1A165C644F554
889670F59A8E944ECC6AFA7B6A38E4662268B7CD0AD9DC7C8A76488829540081
53250CBA969D3DE60DFEF2F305B68018D9AD563B7EF0E46F1238BC57E5E4CAA4
DFA2DB2393C67FC11867B73799F87634856DF63682CF8C798DCF0C17AE728C79
B1140535124CF82B33EF812F0430105577365E08FE8E43D878E25A0646447AFD
43213F4BEB18A5BDED530F9CF6ABE9775DD998C14BAA364E115E3A357AE6C32A
402308C0DBBCAA9D20EE96AEE893C7FD64515D67E55FE742A3C4A27CD322EC5C
D7C83B363F2F3139D4CA4A46E589F1FB351814BECB2D2D65AABC3EBE83F80F12
C1B0658EACB512025D043CC24BED9BB76F95AC853B051C5CB1139ED119BE1D5D
87A0EEB903CEDE0C405E2F0ECBAA9496F000EE564A78C6099C2509BDBB51E428
8954A1D8EA4A0503932C214EC7B6010DEB3A32FF01E42C019C036C87F5B0A8D0
819FC3730B926954950FDD5C8C63D2019C5C236C2EFEB6555ADAC5A3118D9FB5
162DCA6C7D05E9A92EF2EE2149D11352169EEBB3E152DE362ED436EC95315B30
7562A3BAA44975AA9137A04CABAB4BE30E45932F5FFCDE121557FC4141B5965C
E772456B3C2551D9DBE7563614944DF9928E674B5A1E7CCBB2298D47BB087A8F
93DF2E724ECE2049FFF30D05D154EB7BAE980323FF9AD77F7FCD852EE3A7A2B2
0B8AA41E3E8097177E3BC7978ED8FFF43B8F4C7E5FBC6A7B55E007D7AE17EEF2
14CF48653DE847014D04298C47D7680B8BE13C219B69CC1FB854FD9E7E421FC2
D0F3E61C8F275328FF75CBC724A759DDD35455DC45F89D4AE0759E575333BCF7
C5BA6A286A3AB565D6A6FCC78D96F34BFB78A79C53ED5832DA793EB217FBBDBB
22BA72788DAE80769003E1054EA31E44442C6472F14BF3AA30330332E83853C7
EEFA69BE38985DC6AF5EFDB18D66A3DF3AF79F6529D4F76A53A0DCAA24B601B1
7D46136FCAFED0094DD2938C5169043344F182B0E618F8F6ADA18127E0F810D4
EB5B7848AF3D81D91C76A41606817A77C17BBCD7EECE3EFC1952E8251121FBC7
484FA4B55CA75EBDFE371014705D06B2A0D5240D430500190E0316A52E2978F5
09EC46332CBCA7EFE20A18FC45CFBF112150038580630BB4C490E9B080484263
D541258220D34E820CA7144F99EA305F9BCB9556682BD11E190E833376FE0A7B
DFE53D3F791CC17E778BB798FEBD9E84C473961D86E44484883F17F37C02AD5D
FA2EE1EAF804F0FB33A111D8DDBF7183E743E01DF747329C65249CC7067DC937
219EA7F7F725E9D4370AE218DE36DE2CF57760D60B16C923137BD55F88C341F0
83159575D79519F35C94362267A64A721CD6224A07AF7CEBE96EF345796A1844
4811C1A91FD907801F0C75EF548CE9D57300F367663DA75549B1CDD2D0AA800E
966C4C505EB577E3BA84035A96DEE84335BDF2CBC84361954DF160746CB1481E
9D893CF20052767CB87A31495F2C643BEA34BAFB4F058D47F659FA1B30BA8D84
1A96E97EE7B09418C1F135B9BEC80256C35AE021BF6F3F143D2C3B9080BE0132
DBE3CEE665C1C94E1CA90F133F46FE76BCFB57A661B8A8BC3BD80DAED8EB8715
0C8DA27634D309A4FBD9E2270CAB62972BD92399D6DAFDE74EDB97848F88A71B
5F4FF3E95110A1C5E137E4F5998A8A125C8A07AA1787131E694296054A256699
909AAC4B3D18D601ECCBA7E0FA7737509FA56AD13E9F128405522324776BC6BE
248F52764AACE69A60C69019CE7135AA96F496CDE88EA1046BE43727B8408DD1
E5DEF67170B610DC581F2D427E3A6B403F59EC36B66B5CF405880A596B7921DF
8293E6D17320F5C9D9EEAA72009C1B80F6D6462CB84DF4ED7E213FAF525DD8F4
4EA7344E202698BF892D7707F9ACA9A39649E7ABFDEF366F86FEFFA3AC829E6A
092D2184E9606AE7A2E6ED67C54F0C9C5C3226643FBD4ADC386409DF392A93FF
11C586C3B102D730AE2C698C4E20CCC14D683160BFDB46A533AE6A5B861FF1C2
17C1A85598B3486DD3D131555C505F251A9E053E9697D2E3B30C32B03A94451A
CCC8AF9752BC5BAC8D9252C6569838964CBA4DBC1EC5057C96D06C8988E9EE5C
4F8DDDCCC16FD885F98EE9A2EA89B931BA643D72F0594D66B9CB280EBD785A86
4880BC219A88411B82C7C41DDF451E43BB92FE7ECCCABB0F17CEEFCDD474D030
6984189BD0D3A78A7403B3C0C112F4DFEB71B15ABAC4CA91A1662C996DA65239
6AFA0254E18C6941720D04B510FCAFF8C80C6E6D1D40FB3B925A52D0506E0EF5
D74D85AB4756A1C8D41712AF5A0B2C5AB956495CBDDE5725F900C622D9EFA186
FFB875D43EFB35E02DB61519273BD332A66FB49F57EDDE25F152065A1C9E402B
BC57850E071214580B156695686B811C84CDA073143C3BA213AE3016ACC01CFB
7780C16936BDD0375C542979DF5B81C60AFE8949CA2145126977C6A0D42F727F
ED173AF3B6915471675AF718CE650C5D60739E238FFB7E7E0CC82A810AFE4EC2
2D4A61AE89DB50A61E2F6994B69A84A25C97002C8B8C1F6156C1517B1D90936F
9FB328B71EB08BD265361C6E3F87A462BC09D4661D7F0B66803D9A06A2C9C729
80BE0DAFC33DEB76A26E9A19FF4BCF50547DA4617E25C031FC0BD02C118D7B42
F1045E9E43A64890EDCD8C03EDA4FE0438BAB2EA513DDF8C6187466D25803F53
B46DBDB2ADC25D56CCA91298D2CBBD85917831F95A82C700AA308B80ECB1EAEE
42ABA42AA114113CA8A13F62F78A06C8588E1E18EEBC3E22E663D426646AF278
126EAC78B84D45CA302F892BEF1DB32AFB927C36506B4F630D4A1161C176FF78
B97FDB2E7788A53DA90F154FAC157106AEF5A4B17206D59611932220872BAE49
21D1C480C54B75FB18B8C249266AF4B53B2449EA760B3E9477835AE2B95899B6
936971F632669C43FA4B65F35C12DECBF8346D8CF383576EBD675D83F5B6D65F
F82290A5C5400D52A52A1C65704B8A7954BAF4D0CB99DED1D26FB3A88190DB94
13AA584E634409AF48F21C90506DD4EF0B5EFD2B4C8A9441422CA4AEB2470C8D
FF3642EC9A0E40593AC192C51D69004FA2A981938455FB7DAE4FD5DBD78C0769
0EF235E82607E643E544A192853DA5039CFE2F77D25B60A9BC43C6E9851C3635
B56477B19F48178171752937BF54DF34299928FB2FEF49A0092C2774739D7789
20B6F0700BE06466E7CDB4C392F951571A8FA78C111A008D1F2C5AA01B613DAB
1154805E0C6A00BF65925A07C66DF443AAFEEE4D039BB2AEA4A331ACD46B5905
DD2FEE4FBBDF38ADCF73E9344977208D127FDEE09923E494B26BB145C77EF329
401396E267B44AC64A3F7D0951627D58969DD318D9354674C074CE7162F44155
5A9F524610B79BC79EC913CFC3E0186DF9FE251F88942E1E14D8B3225FAE98B0
3D6AB12823203248CD120B575EBBE1B139ECC9F98E90281C35323B847916BF74
5C62744BFFBF4A90E99EF9D923F914AC611D320EF92E78914E0A4829B892AFD3
0C2EC0FCAA4C97611D31F908692EDEFEF0AB82BB6B43EF1C9F405EABD5D2C8CD
C37814321DCA0D7A429225E45401AA6291B176598E2BEA85D72776616B641F82
F39223C54414F455F27AC48D30C05B38C50D340EF73FB7802CF460DA911EF0A5
4710F1C08184F916B04C7EE56D868D5715E1C8457C45F0BEC83C39C3A2D7AA8B
6968FBB76266E6D207B7F2AA3EEEBA3BC2E97735C5EAC709B039D520D3E96A31
190EBE637CB3BF5D47B8570DCA64483C7CF0613C4CA6CC466E2387C874B672F1
2EDDB081EAC2D7F9E0E925097FCAF02A13CD620C691AFEA11883324E8C260814
3E4C30640760F1776B4EB8B7ED12355D5EED9C83196049D08404B76979C43727
70D81B8021F0EEDE5824519F5C5789C7E0956652C907F759B3A35E3CC063B0E8
6826FD0F0B1725EAB4B55047F0D8C21FE38D989BA8E245BA3617CCCDD339A179
DE8A86BB66E53898F7454C19F3EC4D82C761D360298EB12433D4A7367A6B4F8F
DA84EFD193ADCEE16D8C2AC7D61F845B88A03AD7C9246E37E39BBA84A2F6A756
8523CE80CC1298776D012C35C626CB76B466FFA4F731D6BE595E5D4A50C242D7
18CC947C84E83A1AF474DD911C222B3F4A591A4BD39349B5FBD3C4DDC4B1AECF
0305803D635CD329C1D23E04E9A484A7E13C608C462D7D0EB0E97B77C14FD9BA
1237FF835C78D5102B2201C034F702214BE4223BBA75141366D67D8BEF38649C
92BB3E1ED84C6278A02325BD7E4D7CB1D3CF472A0882EA5FA97FA889C9E84D3C
11C91574808880110216BCAC3E0F525B340DE18CB597FB2B7210CCCAB5B5E12E
913F5B9CE099FBEDDA8C3965DE8D7F3ABAB186F94BA653B6365C34581FA773A9
C00AFCBC26F6C6A626BBC53EAEBBF783B6B52DB1D64AF64A14F654AAB2092DEC
4497637839B9224F6E960D815AFF02E22E57800C53437E58172F63982C560BB3
9E35D7B2C0581776FF9A4A1739B46738C8B7A168F34702C361C0A079C0A6BAE6
4901AF3A388C6CC8B87A2B199F61D95E2E4630B97D560B92AF65E2798144721A
9830C64DC3870017B8F987866D181D144C84340D61594FEA130EC33CD6A36198
D6F33EF3BE7A943B5CA8661E1BA8AB5C63CD8D95AEE0A1D358F9E9F23AF673C8
B2FA0453BA51EB6D740B92CC5752D425993158C2512511E0F64576EA0AEA4160
5AF3A40782D26AA2F048B52819BDF43B870CCA35DB121F5DE17C0B84FDA57400
E4B1FF3B46C0B4BD522204759F849C2E8C96150823968DA111DA839E6CBD770E
82575351E01E0170C5BCCB8150064A55FC69C501017185325F6336C1CA8480C1
C4C5FA6EF5F90AA92B6E49C911766F1BF919A26E2E4F269B5CBD584B18122937
18BBBC34ED3FBB1A77C3C62B26916D0C968651703682A9793082DDFE9FBB1FA4
55B2AB3901AF1432069B5CDE2469D163C0DF309BB66755F17292FBBFF7AF8838
0E3D42A6F3D29759971B9D3AD836C8EA8140CB77BBF3772E01744ED97E525F4E
E07DE44F5D70AC848899EAFF1FC4DC5639DDDEAACD462FF2848C10B77C824FCB
162134EA362269EF363B821406DF26332633A7B06987AD8E93184A5A5ED6114D
0AE8D0D15EA397F5159822588799FC202E4EE65C6290717D26F479BDBFC00197
F5FDA22D90DBFE87C5B6AFEF2E01FFEB59866F6C2815EC110631E757464F9016
02622595366A23D909F5EFAF39BA50DBB4C0FD453FE2C7BF003016A7A26FAE2B
072BCADA60D539B70780D706EE12C8879BE37CA679D2E626BACF360C9B45C44E
32872C31547675B9768F562B90A2FE23E0E246AEF53107456B089399DCA9744A
AB1FC6F51EF9CAA3DAC3454E59449D807635EC26092D13CBB8B1FDC12BA2F783
9982B2574A4B2D8BC3E81C8FBEDB15216395D5D66FC40AA5176D45FD7FE4009B
A99809C1258892C3B66416BC5D388839369D8A9DE2BA03FB0A5758472337445C
D600562D5BE8AC652D8FF822CD67EF2AE9E6855104CB71C8BC95553E3F8DCB16
F6683E8B8E6199A2579EA6D01AB964D7FE3A6472E61B1D4A8D86236A2A2E38AA
8025BA3758EEF331B4ED1FDC2B4E880118F2E89237B962732C682F7F9D766406
D555503E29C3D856E025FC484EDEAFF4A68384E22097FCEEA0B3F76E0BEAC86C
4711405102BE8F79DF8C263DD3AB38E1297F654286B55B3DC31CDC8B7702AC96
EF0408443B7581AEAD6D098F9FB1291CEC6828FE8B3D639FE533B45065061261
11FEE76A1260CF0EE235963F033403E8A4AAC01CD6E1C3A74FC5A9AAA9BDE955
4903DBA848DBE01F9ED7345C4E08A94614BC8E40AECC47AE5719642416CFFFBA
7FE3310E62687219311E8DB9DE14FD725AF79FE1149937B87E596352DE196F44
B2B848D04B9775BED9CFCDA604403A483BCD280A5C651B8F7DC113B1015433E3
490C1AFF5783020A311D8546CDD5EE3D370933C87BA0B36713706A37EFFEDD4D
84F7AD0F15B771502EEA771EEFB6059D48E5B87313049E415568756F98868A75
13A7B2D435CABD9627F4E37E73D39B1BEC7AC685EE27C3D1067F5BAE0DC7C943
FDD33AA1EC169786877FF8E1E43ED7102D6BD6556F58AA82A9E526773057A297
E192326C62F19DAF163A808ACBC915533C2C99152CC80B12DF12C88173E2F3B1
C5E32B258E268274436D40BFF572DC1DD525F48CBCD032938D751DB78EB312A4
E48B713D5405BE19039724A26FA9032FEB6619FEDCBFD892E22992FE0D22B028
53DC3D95AFA2CCAA872B8DDEEDADA4B8271FEA4B72D1AFEC3FD59CE909FEAEF5
4D49CA1058B22FB51BAC054A35510D696D92DB1C49A79B351C548F3B90D146FF
5492EEEBB3167DB1E72D8653DB04F4F3FBC5C084030A7705D1B239DEDC99F223
19943378B44FEDB63357BED084B508EE497246B6836208044C0FCE796384CB0B
8392637A698A5AAAD52A6F906AC723589E3EB7871F4B612EC5FEC93E461C8F5E
C7394F69918F77D5CAF4708CCAE2C38643575F536742E9E73E1502F9E0CC5E58
0B5C7953D543B90199D2EABB95F25AAE658EB18E6886AFCF9327206A0EBBEBC8
0C00CFFFA1D7E7D453EFCBD900174F464249F07CAA9158513172304858BFD7BD
E5F54135D70AA24B6C5C3E4BA0BD6E0ECA2EA067B196AE3A10B23C4A80E47CDE
3AC4BAF7C2243322CE7D8BEA844D9134C022B89B10BFCC30EEB9D38C1FBC1CBF
C72D2727E0CEC14DB9FC4CFE25329F083E863A2C990DD3E03F5AF4442E24C3C2
2976AFE76C675440A2B98D4702CA847304A772C653F491C45147D7DCE9445ABC
E55EA8FB335FC8D4192089952D125BC588A42AEEBE6A6D35D2275F9C0C621C84
95F6172415D55EA70157C867EEEFA2F6116A2B7959DB9C44CD8766A70A9F3481
63453A9B40DACC9AB7F5982B8CB6A513E193D58E0DD58A8335B6A5CBFB77B4E1
B73CF1C30F4594C807E5D17D80FFD231024579317B7DB7E9C2185A419FE1CE46
1AD96D1CAE2687C8C73B78FE06E4A2B80D095644C33FFF213B5A6B860E16616D
EDF58002E24572A5A8C6915B941607B079990CA28D8781620D6C49E1F4131A86
3A78D17C16A93807
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 52 /four put
dup 65 /A put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F90A32C4175B6BFB279
024EAE1B04D721A6C54FD62484F8949B2CE9B87D9CEE04DFF82BF14931B3CA03
AA5F701B6F80BBCDF2C427C40A51597F0B1BFA25EDD7CE0EAF2EC676BF0059B7
15DD5462BA30DE78A08DD533DC0E8D85F9DAFC5FD842F417265427E0F1B71834
D2BF6EFAC3CCC40D3EF3B2E2080F148441BA45E5D0C0F7D8416730AF4BE4FC93
1E965594E0364F0D4976695D2851ADFE75F0E8AAEAF174FD8B2D51B05774D665
ADD468A94D26632BABF5F8C6E3EEA47A110BC1DB568DC629EA6CE284EDCD95DE
BE586A0FFF6BD2983A840B68D656FC15842D694DF8B211A29E4F5378B00283F4
3C55605847ECC0FD778067A273E39AA72250F7528842FC37D91B86475F3CC423
072F126379A165479BE72057F0D6D0311BF204A5FC29A7B34189E5C5ABCFECD1
4E0E8D62BB0BAB4CC042754690AD1AC793BD28FCA5B8642474DCDFC2D70487F1
87E9DB879617A22F788B1D3F388BA91519558EA93DD20DD2C42A98B6FC84C441
A2FA5019E74530192B7D0F3FFBA6F64CA5DC7CC14BEE324383EF0437B00C367B
143C34FCFE0FA25F666563650EB98D2C4BB7CAB4AC88822C1BEDFA70552EDDCA
F7DAEC080E933810BB1AE62A8BE5BB766D0C242537C29A9E7B85944E6684A217
7686C84E3064016E8554B9B513DA352F91F6629392ECE28BA4B5129FD3EDA48A
77D0B446667345499CCCA580080E0FB5AD237EE52389CAFAEAEE1C85FDD4ADD7
CE34CCCF295E24A545E6CF183F39073AF31D3AAE8C8D2BD3034820EA53FE5E6D
9A09EB31A5131660F347EE1D03DE9DAE18E2FD7667A769D746E4236E7785A3F1
7EBF3B768FD0EFB91B78A79A2FA90E22D2D2D7E05DA0C8EA46FE05BBA2CB643D
CABA5EEE7C4A3CEEDB732279FB8D46D472D60840A71D8CA73871D9CF166B2121
8332A59BA73B3282E833A4DD121B7588968F3B51299ECD707A6A4F33EEED6A04
615AB2ABC1D7DB1C89E3141421676F9525DDA89A2DA9ED0FF1514E2F7435660F
C29C852982A084E9C691F2F37E0C503696333F1C42C4D009CA1B715066A50C78
7D58DE155D1FF6DDA77D46B69C49C3520E6CE3DC73382089780AF0B830827936
7CF9C92ED81456C11952F0F2AA379E39BFF15B37CDA8289CCABB0532DE3330E0
7876C11402B31FBBBF0D0410F3D9AD2862A729A47F1AB1477AB32752C74CCE68
C7D6E78D05C4C1451275646D0EC9CCE3FBCEB3104EE554789FD8E8A130DD76A6
7920DBB7996EE25AD041B5F2B5DCB2B3A3F5A4686ABD0E4AF6FA2090837BD1A5
F1AD15C37D3EB3C4D7C156DBA1E7162E3124D1B7E1239D78437F29C270264F97
2508255BEF89C4830CF8E307113AF338DACDEA2A88F959523C24BF8F5E069E5D
EA9B8E58C98E9AF80B400B34287185A429C3BEE6EAE3CF1DF390F12910189909
4054FB1E5B00B505666A6495BD5F6DF3CE81E45147BA50B542C7D731242EA4B8
7E2480184B8862DE9222897A9B7794FC410E9C448FD018BC3F92D02C16001125
4AEA07CA74EE5B788DCDC0698BB88389671E070CAF31DB41360C2F8B86DC7FA5
299497D993A45F1DA05B5CEC6DD8799B5285DAC037A5BB866A886090F30FBEFB
C6BAF0C85E7672100F588979C83C1BBEBE1EA8024F3508D1D8E246C009BDB86B
18559F414D02A46212D5E3B76119C29BD203B63D1442C5890E0B046352324AE9
1FABC5EBA3F5E61D6AF3A330739CD2BD4CA9B5373FBC39DD2A1A37BC37C9A531
234C7F069CDAD2FDF9F3A3E1ECDD699796F7D6FFE9F992679F77DB55605B8D22
030D78E774F9DC2FA1EFFA12816C936BFFF5443C0499AFCBDFF741E2D9DD31A8
F11F3DD18ECEEE14E3074DACA34ACF959A5C4F7CF75E356BF6AC7E144F6ED02B
62F8E107E2F75A3F079839AA01321282699E72E823EC2B8EFF80BC985E5E51B6
E8AA34F5F52371FB1295A68EFF688E654A83A7703E4A559A99942AB7DC001535
651CA8B2154AC7020ED8ED4E2987AC37E44B401BCAEA8F5C73994691F287F01F
CAFF4902151B7C336D6A86324E5AB1BE962F77318A35B860BF164E6CF712B8FD
2A853E21F35A3E0F56D14B104086508F9D80BD2DDE778E34E19DAB01D3094FB3
8433DD4BF782B48D27084081E78169ACB15D3FDC894E27C49FE01B3CEDDFB3B2
BCAE20B5702CB2771AEB048C95E47C8ED7176E0DD778699B1948C1D85B77ADF1
6CD76989346F2B0C4BA8B523532587D013187621D250BE3D92D55FFE7E513792
B3BBCCF80B9FE3C00B1FF4F01FB59D5C9B208BA756C1385B4F2EB32B8F856B8D
6B44D7915FD963A7217C1CED77DE7023538B6CD5A05B91D2428B6384FD9A8704
3C433A9AB6098AA95866DBA9A52F42A7CA9616314FCE712A700CB643CDC96723
487F3588DC0FA5012F5554F41CD993CA5A5B2B23FC761484B50F33192767A5D8
4397AFAFA6536297E3B056435A4949AB750ED89C0D0A49BB75F745C8C69CF305
357B315BCBFD09ED274E3314D60B10A4DC282A312FBC2669589ECF1926AA6E3D
295B5CD881619F0D73BD7B4BD1C128DE28E80A9D67C93A11438FCABCD54FD903
C17DB45E5929E1E46832C765A2E5E0B9A525E3C56E7D05F6AB7BF1B1A37BDD39
F35E2300F6B1E48AFA44FA49BB7CA8F621CC30955D47CC581FECF9D6B2DE4F57
A95CA82356E649E9CF2C1789F5BB2F5AE9ACC429B75FF83C5D0034CA30DC4011
4ED27186CCFF7F457170EB432F528CB45A3B8E38A2358D59DFF4889D77DFF79A
BF7FD093F54CCE810117A37FFAD7B07F1645FD30C93FBB4DC0753C0D4ED7556B
B7E9552F60C01ED19985F443DA2334DAEDE9955CDD6CDBBFF8B2EE41E471BF26
6D74E3AF4BD620845515CCBDFBACD30F40B4531D4E583B5205430FE2E5D7E0A6
C45EE6C8B245917363B3C6ED9392546AF8327EE36CB4C1CE3CD9B53AD6CE85B5
03A2FA1D0188A692ACA3A6C836856E25B182010217D79A317B9CAFEEBF1911B6
D393EFCA005B2FB27D0994A098E3DBE61A0155295023CCA789DE710D23E405EE
4700F40D0FBA6219B15346D2BA2D7FACBD01B3E3E7B48032B122D0E7BD5CE0D3
0507CB07403A3FB0FE3C07162C8985AF5920A62504AB342A40491CD830D3525A
DB72540B74CA771AB30FED6129126AEA8147742FDE6AA6907EB7253D12946AE2
FEFE9C74341D1CBE0FCC11B0A76BABDFCFE3B96E88CFB7D331C6DE6F2C0E1FB7
179AF13F79BD87A080DE0FCDF350315E1D9D52FDBE9D5BDE060C076BF1125FD7
48E14B065FDD6D87B65758783916C2A8549809B642F8C4EE978C69E74ECD40D2
33479A7B7702D50352EF3CD2B296B1E48731BDD34313A801A316BA68E1513CD3
F23E888D33B79CD9D5A632E8CA43735122DED41CA29F13324AB5BE2B6DA5F13C
C70153AD18D9B62B636AFCC978DBED642E20FDDC6F25A46007B147F361631BB0
FEFF28128E94821C92AEF0BAAF17C8AEDA1B1DB9EAA3EC525181E7C72966DF56
A86F5876B7D9A4D0952C72F1FE91AA1A08D41974B3DE399B658C4D683A215007
8CA950EBF0A902B639CF5C99D3E04CC6D2B5B5A2E850FEF6C31D3352AB23B27F
771C00E09F1B7FCD2085E0648A99D73473F00CEB22EADCE06E821BC0C8B60FCB
A56BCC46F400A096A58A2408039CB2FB97E59598350BA543AB3342710C5A37AF
C3ADF808C84FAA356DF47E80B683849E6446CCACF374097B965B61DDB9CD2232
7A3E8B7B7F732BA6E60FA30CC6C58547755F56FA03B7CAA06595195C25B1E78A
73020F23A4C2D86913AF944C4CBC3238A072357321BAE1ECD74BE8139C683E2D
3C6AA4A5561203F10CEA65E5C2AE8FF6B6517BDBC9EC5A6598B0AB7E7723C3BF
AED673FBA6F6DE06B357EBCE71B6C4A17EB9A0685F368DBC9D4259AD5C5179BB
A205C551FA5B51E4C7770BED4F0A2729943B2AA0577822A65412D2A4D5CE3243
1A9EED01599423AB84EA00F8C096BDF05319B6282D46C0BC02797D54652C1DB5
6219CAEBE29A4AB76B5B99C2F7580772732974EA1E8F396EC53885272176832A
F546AB1ED509005EE0272D55545A3D23E3398D5253DDAE423E6CB3E90929440A
9062C86446615E815D8679C8D74828B28A6F6093C38D7AD2FBDDDC62F439C8C3
7630B21EAE3528B00225168CB0F577042FCE0251C4945200E1767B18789031EF
3EEE86415C48608735E50DC5E0243E09886C6AF144766C650B415C57DBAD6756
8237CC119B841BCDE2619CF6FFACCF2233A924A62F100E9CB93EF7553C879B40
1F66969EC2CAD397DC56E2ACA3E11CE33F812039BEFA22431E207A870D01D611
BDF137401FD0C8B5C68D63953F70F2781C9A48DC7ADDE8AD0C5C226C4B18F575
F2B480387356743F4E20FF8963CB88FF2108D6DC7A3FB0CEBDB7A421E3AD8A1D
FAA8236F7C0E6D538F436476F2C195245EE0561CDAE87B801C65AFDCFEC367FC
C2207C651198C692C928FA82DACA32297BD2E3C94E87A90BECB2C4B0A07211DB
9B6ED0B6EF7126946DC61A427A0253D21048C54344C20070D7E104D8EF5824BC
334D90FA65C7626A44C3DB13A5A89ECC475B85698D49AA0AD262B4F5AEE0DB4E
459E83C690964292AF87EC27021793F2C60209150E1C87A9BAB4F5BD2237E0F0
60BFDFC032FD1E4EA1DB107A33425D1F7BFBD326F26592B821605F219B9D78F6
45142E9724EF7FDF37DF947E7325D45E487F3F263BFE9EE52B4CDAC8FB90C570
7A23F435D62F805D08CA1317DE9FA3E8087DC065E896A7917CA38145474B14A3
43925393366A51CC4A2C483301AB0BD2570C98725305EFD3BEE272BB00D85F75
F7E534D6529E28C51235C160C7587A2BF8BD7AFC98E294E6B138365FB85C0FBD
3226D48643C8BC9E69F010C6B1C61DE30A7044048BC48909C8F2775AF3F28C5E
5FC9C16EF90A6BCA7DA377BF10C5ED50C716D38796A9549BDA34F1FC279AC222
31E7AF570DF4EC6D5F04C113D7DD9FBF11858261A645D2D30C1E0AA1407A6764
6565B754319E751F4BAD16DD8C124DF1CC544CDADDA605DF46739966D2A2332C
D4D2B4A10D9E8F7EA22FADB68236C89137073D6D444D79147BAEA4996C1D9914
865EFACA2F7D7EAACD755ACF12EDA6100B2950BE2249C3E53428E6180EE183D0
3F507616C17CCAEA87AE91AFFC47C1DF10E3B0EB29ACCCF5F371863EEEFBB76A
0E78EE25F73701B23C2D1D01C4EDADF8C2A6C63DBD59CDC265DD60396296F6F4
63A6E1740ECC83F681F7A0CB0FB31AADE0AEB223B8C97D6278B45D7BCFDEE56B
46D915E351FEEE2BCB99B8BCB9BDE76504095836722190296CDB8156959C5E18
3349492151985327E8896B11DE9B5483A5576384EE74780D06AA24003A04F74E
536DE7C5BB42EE7C748AF4041C355E844AA5DA7D86CCD594DB864682D37FD8E1
FDB54B86D521F897C80F4B862C80001B72682E7D2D3928ACA46FCBCBABE8DF63
9F057E0011DA90B551A650E2140CDFEF6F6755C1FDB64592E669E19046C27062
67CAF885FA2459C2424B3F41A63DB43C0ED1C44E6E4820F4AB1A52115B8CC128
51BC80A18AE765AC5CB02FD03C198C69D5519BC26332971255FA3AB1836946F2
9436296ED528F2F1D1C4604FBA833354C68FFFD8D97C541E63AAEA8B8E0BDF62
BC8886EE23D87E7804DE0B173505973BD7CC862FE2132C1713AC5FAA8A1A16F4
8CCD81C385BFA083DEA126C9FE524F07444BEE10F2B564296B239CF04A771E4E
BD4AEDD42C81CAD57A189953AF3931A1D8DB7FCDED17170E322BAFBCC92A92C3
F40FD84EBE6CFBE4A414A02261D33448C031EE5BB8D9332061D1BDE57D55E63A
54697B1038010374058334406709C38BEF6A8C7A14F1BA8B8BEBC0170FC0B227
415DE9B9F92BF321F3A00C9F47D8978D7B87654B2C70FE4EB140F5196A026A96
978B061256C26A0CA6A332ADFBA9FE18723FE0867899C240F607DF808DD62568
D1BCF9909719E5DE72E035D952F7FD0913C35078C36D106EBCB0D8E85B9D718A
F8D3C19CD76574B90AF3ECFCB529B6AD9CB5BE569EEF2F295DF975640666F741
8208B886D3A39FC4C2D85B2C1E15F8A595104069DBC550868AE78E7C1C792F82
2CCA0014061E9DD47CDAA76D8E61A394AB28CC34F65E725C8BFC79FB5DD71E3F
A85710B558B99738A4A54901CED4772D0641BCF1179AA9CF7F52A9875C1DBFD6
19F293D437625C9798758FFECC8680FAD53606DE23D0B7E168D998D1CFB13DFE
43B628E1E5B4A8F3155FD67AF7CA23332187B99C417908CA6E0CA86914D425F8
3CD49B4D0386A3C9A4FECEAFDEC07EBA1FAFDCCF784A2CDCED1F84E11D3764E0
5DD6812C43A6FE08830BECE5E5767EF190AAE502AB469957434F4F93099CC197
E52DD1567D13173391066EE2C89EA7519F0027B7C7AD10FCC9A68B0B5246F1FD
F1DCA93A52730EEB0E5063AE209438830E4CCDFAAA9CB1CD6F7514638126B77B
80A6265F20C476740D17990BE1CF27AF2EF6A64B05DC7DAB402F54FADD63C843
AD5FDCE2FFA1CF03D7874079019B42E362275969CD96AA80A800A5D823EE5200
AC73D4EA217E52F50362B8AF474B66AE065F78A4246172D11E7E873C2D7316C5
E228CC48D74BEACAE88B2239E9E7D514E61D1A2FAFB9994D83E0F3411E2B0EF6
0503A86B0E675076F8F01D9E8C8275081802650BB2070F93DB917AC2C611D5AD
8A0BFFFC6E9880A2113A6717947E9AF1AB935658FFB1A5EDB41BFFCEABFB3660
7FE829AD41AEA7D6C27626527EF25FDB9060FCC36D0541DB64BECC7F947B5B54
2C633AA8260A18A475EEE9F305C30D17B13C1D8FEAF46B7EAB71B65FFB4A9978
427E5862BFA545C58E2CB62F244D976441DA1FAA642942270F1881E00CC9A88A
456B4FAD66ED9D37852E9B3ABE610A6ACEE5230776D15D56DC58EF6B8EF25CF6
BC7F788796A02CDAFA0C2235097DE2A57EB14A4AB0582A83F03DE1B7DE521B4F
8A861FE35D72C0AADDCCDD80EC048A532887B40C26B17A56DCAFD1BFB9302206
E8756A5BCEE6452C3D5B068F3489BD86C43AE68117C8084D47DFC52DC73E9775
CF5A624AA4AE581F4E8C18B118B81F0013CB4857DFD4E84CEF9FB251DB0A51C0
766E5EFB5C1C90203CB660203824BC05ECEB3C5B76DD0BD352B38C3F58BB337F
60F139FB9DBC24D4A01C6D7FD29967E1AB6641A66ACFC46FADC5DC6DC4AD7FAC
D6636828809E114EAA42E1FD0D21AF644C4133D02B39049C7AC6D5B2C69ED84C
C73F561A9A11CDB8463847B35F7D333215AC1F574E501B1B628BAB46EA51EDF1
B95B666637A5DBCED5145597F28AC968C70FE14671B2706B6FDD4DDF18AFECC7
20C4C3EC8A4A1C3A282F9DA84C9FA0BEABB32C6BF4F3C955AF0E7BC9055BF287
8F7FB58B05CA78F285B78DCC99A271989D6417E2565DA5DD34962F71046FE351
9FB2D2D10A43321599A51B974583D6743A1AC1B7B99F63B192C58BC3CEF89C8E
70814A67AC238BA47FB0064B9E78FF2A6429CEE27E49DD4D25573740F94255BC
7CF9FD93905BB55B19DC32D6EDC1FC7A9846CC092E7A93C87DBB4D7CA22D19CD
78E9B5E1A1E81918EBCFFE13DD8EDA8A66E68B2AB34425B17070881BF04E9C87
5932FC136BFB0FD3EE8E218685508976D1E4A2FCFB52D4770AB2FCC953FE28AD
B82A5AD948421ABA87D6F60DD7BB56E9136F934349DCD59132F9850D4FE73F0F
E7FD159818368B417466C2965E1D9FED2F26D0150A101F5AFA40AA6318CAFF64
6D5FE91CE52002FAC9F0538F949EE59635F9A1B40C41306236464ECD7F8650F7
84EAB1150BA68BE03F32BF93C869E2C776623AA8AD3D2C025964C0F026E801DE
6D702893B75ED98C5231D0395403E7E6A32017F51F893B5FD6DC422EBEBBECE0
FCD44EF5C94D04EB6D600C0A89A1CF636AB746EFC863859331261240E6A54148
CB53FB51F808B6F4408B7FDCE8F9765090E7CC55C319113C78E9E22F4BA5ECC1
D8FD7823665ED263823B34132368ADB9B782D32ABFB1D49B8CF4E9F72FF9439F
65930D96FEBF0B820D6448C4BDE0119E1D73E30A0EC75FEE5E4656810D188CA1
1DA95A093758833A759546BA89E0044F335DDF1BC17F4EE52CA6E1B27717553E
A6A47D8541AA4B1E4C70AE93880722651B6E1FB5BB93950141CDC41683B0BA94
E47532275C70BF6172C939F615F8B3EBCA51644EBF25AD9D238E8A06A2FD512E
09348AA3786E053C5A1B00509CDE4030ED7FDCFDF280938B1A0186D11E6F737B
159CFE0FA85CCCBF141DC7110F9BA561FAF62964555D13DE1362574810B1CA9E
36F3E1B901183A57DEC41B7C79085647F172CB04BDC5B297903882AF7B7B4EEB
EDE64EA1D3A7231037A3E0D0FE6F4BDA8C3E5B79B8BBC3C7E991EA86DCA6A813
FAA8D2DFE84F4578D698AF12DF2F148D8868C3F992244880178B40FE0E66AAB5
990863B1DEB4373CC18F030A3AA303A3C9FE8AA302A17259250A3F466E1CA898
C4FCF6BD74BB4206059031E73E9458462194F9C357DAB8991E43FC33CD4FCB7E
7BD159DF4DA33C5974585E1FD74F5D0410E15E6FC7C24823F95E1B491EF53894
4138B4487EEE039F89866CC17E3CC9AD11C45AF68F2CC05D09DC3AB2757A6A69
B2ADAA265F78706C8121D45BD5262F6794D8638E0B02A0A5E7274C60100CC29C
0465D28F2A0AF0E01D76F43DB08B16E76A1EF475E6896DAB519C694231AA388D
CAFA403156EFABF2A49E830757CDE41082BADB95D7EFFA31EC79702E6AA4963C
A43971DC37961445A8ED29878ADDEBBECBB11737D7FF20E1C7E6DD3F12753424
5DE3654D56F9624369509FD1FD0219A2F07C52CD52CFE01E0541C05C04A86BE1
BBA53546F41CC083ED6CE03EE3AE8C6BDA19F565C08EA4EB356C6F33D15CABAC
A20A2BBB330151E0576FEB1B8BFA80FEBECB7AE4ECB1C602B20E7016A09EF62A
76BAD6BCD741BE83FAA10C8BE5A4676ED5FEB046A2C8210793B4BA0E60D0A1DC
97CF08098FC8E9CA8D4F84CF79FBDFD545EBABE2684D1C306391216B88D38833
4040E137BEAF94E2532F4C4B6713AC69D55F9FFBE6557640AE4F8CE57D54D5C6
D61C15F6F9D1A8AD9031F665B3CB1AB4DC60E78B037F2313CD296AD30E919B46
CA1D38FC46EF81CD58AB420FE9770E8D8625A036426E74CE570A8D5E45691129
4CF1D650C8F6A0DF842466EB51B8626F1F97EBE628507B89406653ED8BB38C31
A619FA69CF12B3F9A791267D57FF40132EB34089DF771399F0E3A2A27EFAB113
1C4ED280C55C937E099CC40156D49634DDA60CD81ADE02EDA09EEA90D08AD8E4
296067DE179BC795549513EA57E8425DA959E316C0BCA6A7B20D80CFD4824310
5EC574C7DBC286A2F5B7381CC82ECFC3980E2B07F238C950B1FD9B6EB669BCCE
B7A06F01642CD970180B1C3790253E3E17AEAE733C0D1414922F0F3AC9F6D370
8EC0FBBB7B4B3A15522663131F1EFFDFC13129F813B247CB8C59F47BC518ED72
1B01E53694A44B3264357282CCD816C967E19A4D2DC9F16339D6FC3E6ED99564
71A3470D8284D41227798F958BFA298663687C712D2C9B78FD7FB63224FC1F57
CD38AC4AC8F9C4D09612DCE882169102728597DFCCA13AA2B8B3EAFA9C356C5C
346EEA6601B16AF21DA71985A052FD016888B9C0096C5F8C88FD77B6DB6C530C
C8505FF07B3760117E7E0C9A7C3EFB9A2F30CBE0EDDA5AC4680C10285D8FBF05
71C2F4E4A03C403EABEC12D82E18B5F0296601B13D0977902C859FA77998F5AE
44F69E2EEA582AA955E63A26A0D90470092C7FF08E70FAA64BDB1239F7DBB688
284CFD1E95A5DDEFFFA1B8E8C4D935A9BBD6B0E8F4825C1CFF1C6DC266AF581E
6B84B018AA5212DD5504C5D2F83EDF0FB6D754C9CBF1F7F2F7FC092D9B3EE2AF
DC07119A4A22AEA40D63925F86190B4FCEABE8DAE13A6F442EF291571C08848D
06C310EB39E8B8C62498C46ED0007FD43A7FCFD5492238844DA94E0544066FE9
81B4A33F92473CE5BDD875F1F5EE471B6644B5373825E4066AC4E2B2FEE738F3
4600D1F87E8487837DD722473218D4191D076ACAA4FB328C8203150A3DC868EE
C6523D0DA6A72E29C71489B67E97CD484D97FB631CAD00BC1330C2B63F8F1EF6
3783BDA5FA0A82742C6BC6DEB8F65396741019DCE65FF5BB290EE6E74B00E0A0
73C78351A3B8E38A0AC28DB8CD4CBB9225C4616159E2F95FF755636E598C9F8D
A4638BF3F5C75B2099697EEA8DDA9958255F2503EB0D2E05EBCC4919807DF1DE
807FC93438F63703D558DF390F7393EA5F35F12E84BC9AC178A225B6E1F16B3E
C46F1F0B185ADF178434D696A4BB812B7F2916949DFF456F54E90B300523F0E9
40033EFABE808D456EE42D8D4CB45A90ABBC1B241F6126BF3663BCEF3D8D190C
4DF7D2C308B2667DA60FE2D8B3F065B18EA370B85FDCA7F73A389FCDE5DAA5A6
C86E0726963C4A045F89011D61088E5BC558ACA6EC2E8E21A2B251FB7D8A4CD2
CAAA62BFA4226E054D0EB0FFC6EB355FF6211BB64F57ACB5A3D9F05317083B2D
6FED245AB9D4CC708ED2F9C20F0E88334667EB0E2B37DBB8E6B2750CCECA3048
1E819828135A64B83A0F74371C83C92F0640BCEE83D2C28CDF13694729859BC2
E210C2D5D0A51EAA0AC6184BF73FA3DC7816951B264C8EBC3CEC5A4CB339F041
7D1CBF9FD605A2C80370F8AC05008E32B2F4994EC372FE48D7FB226EB577A2FA
99C47A3CB556EADAFF6022AE4E6533BE28107F55A80D6C76A141094380E753DC
09B28B77EF0581C58DE11F0BC8890151DCCCAC37B1D5195F90FCE9CD4B0A4F49
0DF3F00083A1C469E32EF2FEB61B3B0A2DF540476965619B38AA6A6B1495D830
F8EAC60D3D4816739A52F89EF7AD8B0C0C0E049F456C0843F5BC48DFF9E21793
59AA0EF8D5F8E10CD6613C40F2A6ED7690A9601336F7D1C9ADB6C19D30954F58
E2E7A6746A65D05707A68309CBF43EA3938EA5843C8D75A784B61872303893D0
F32E4A54110F09483856BF356FAB6279A5650BA543F4FC59631A7BD1E5BB750E
E6BC95E6A745F2EEB091B9EDB10FEA37A953E0E05479B6AFE680D1F8948F63FB
E196E4C7B87FB22BF02B31C872BA83FA653053B258E10C75F76A4E7BA24013B4
F962C279E7AA6D5A0B48EE3754478A97C1B3A227CD0EA118E3CB6BFDDC79E7CE
3516FD93E2E92203DE226301B9C2B113E5A3E45F2568FF7411C59F75DD40E42F
A8646924513CF2F8D31824B284C1BE691F45C1704B9310C40ECD86A806FA7480
7147088DA3E9B50C826EB21F950B6EF0024B76F50EE2BDD87E08A375B5A56901
3E322A6676F8E0E84F5822C32AA8082B479A7B38F2000D7336657889A3D4CDB3
7176BC3E4F642ED0711C964B16BB845028C1FAB2D50D376C7A102719652C942B
4F530D9573A93BEDF89401F5F1D65856DE1FAE4EDF8B8DFD25A4A73229D35EF3
1DC7D3027BCA9240613BE8639D1B371A6011F79BB70474F691091D3690E278B3
E195E18405261EE1C2AF929FFA4F2B2605D4957FDB3CB66996432CED778DC3D7
836CDA4CFA8F2D9EC4A1CC66ED0B4A3DD09AFBF6E750CE095E2ABE308BD0E17B
A62577B4526CB731464A9FD036E6A091711F7A8D101BA545F5526CA29E9AC7C7
D30207456A5AD86B51D0FF971F190D23DC2AA5653215BB29C3428B3CB084B56C
8D463BB6BD121250A6B6C8E5DE5AC04C6647971C8E147EFF792A3ED9E0D6A978
959D994DCF1811AC5A9F08477F6B1495ED67AD20E39E008C5383B38A15C3DF08
33AD2003AF92AB4B4395B51801CBA9AC981B1B447371E669F354F38825CBE46D
10DA56B9DFDDFCC6D20E797F7C01D16EA01FDC149785D610C8C40A89BAE3D7D7
CDF5CDAAE6D6677BC56D61AEA61F9255E9B83B8ED8D7B0633CB802E4FE8DC3FB
75709AEEC9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (main.dvi)
@start /Fa 134[44 44 44 44 44 44 44 44 1[44 44 44 44
44 44 44 44 44 44 44 44 44 44 44 44 1[44 31[44 1[44 2[44
44 1[44 44 1[44 1[44 44 44 44 44 44 45[{}38 83.022 /CMTT10
rf /Fb 134[44 44 60 44 46 32 33 33 44 46 42 46 69 23
44 25 23 46 42 25 37 46 37 46 42 9[85 3[46 61 1[57 65
62 1[52 2[30 62 65 5[62 12[42 2[42 2[23 28 23 4[23 4[42
20[46 46 12[{}45 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 411 Project 2 \040pdfsubject) /Subject () /Creator (LaTeX with hyperref package) /Author (Eric Zubriski) /Keywords (cs411 ``operating systems'' sstf ) /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 150 -208 a
SDict begin H.S end
 150 -208 a 0 TeXcolorgray 0
TeXcolorgray 150 -208 a
SDict begin H.R end
 150 -208 a 150 -208 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 150 -208
a 0 TeXcolorgray Black 0 TeXcolorgray 150 0 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 150 0 a
150 0 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0
a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 150 0 a 0 TeXcolorgray 0 TeXcolorgray 697 83 a Fb(Group)27
b(14)f(W)-7 b(riteup)150 266 y(Our)33 b(plan)i(to)f(implemen)n(t)g(the)
h(this)g(algorithm)e(is)h(to)150 365 y(sort)27 b(up)r(on)i(adding)f(an)
g(elemen)n(t.)39 b(So)28 b(that)h(the)g(queue)150 465
y(is)22 b(alw)n(a)n(ys)e(ordered)h(from)g(shortest)g(distance)h(to)g
(great-)150 565 y(est)31 b(distance.)47 b(W)-7 b(e)32
b(are)e(b)r(eginning)h(with)g(the)h(NOOP)150 664 y(sc)n(heduler)e(as)g
(a)g(base.)46 b(Outside)31 b(of)f(adding)h(a)f(couple)150
764 y(of)38 b(help)r(er)h(functions)f(w)n(e)g(also)g(mo)r(di\014ed)g
(some)g(pre-)150 863 y(existing)28 b(functions.)41 b(In)29
b(add)g(w)n(e)f(sorted)g(based)g(up)r(on)150 963 y(sector)39
b(relativ)n(e)g(to)i(head)f(p)r(osition.)74 b(In)41 b(the)g(struct)150
1063 y(data)g(w)n(e)g(added)g(a)h(\014eld)f(to)h(trac)n(k)e(the)i(head)
f(p)r(osi-)150 1162 y(tion.)62 b(After)36 b(w)n(e)f(dispatc)n(h)h(eac)n
(h)f(time)h(w)n(e)g(also)e(sort)150 1262 y(the)28 b(queue.)233
1362 y(As)c(it)g(curren)n(tly)f(functions)i(it)f(is)g(the)g(dum)n(b)r
(est)h(v)n(er-)150 1461 y(sion)38 b(of)h(sstf.)71 b(It)39
b(really)f(just)h(tries)f(to)h(\014nd)g(the)g(re-)150
1561 y(quest)d(closest)g(to)g(the)h(head.)62 b(Ho)n(w)n(ev)n(er,)37
b(w)n(e)f(ha)n(v)n(en)n(t)150 1660 y(b)r(een)g(in)h(an)n(y)e(do)r
(cumen)n(ted)h(w)n(a)n(y)f(b)r(een)h(task)n(ed)f(with)150
1760 y(doing)28 b(an)n(ything)h(more)f(complex.)40 b(So)29
b(righ)n(t)f(no)n(w)g(our)150 1860 y(sc)n(heduler)g(will)g(function)h
(lik)n(e)f(something)g(somewhat)150 1959 y(w)n(orse)39
b(than)h(NOOP)f(applied)h(to)g(sequen)n(tial-access)150
2059 y(hardw)n(are.)e(In)29 b(fact)f(this)h(sc)n(heduler)f(could)g
(quite)h(fea-)150 2159 y(sibly)j(starv)n(e)f(requests.)50
b(Although,)33 b(ev)n(en)f(more)f("in-)150 2258 y(telligen)n(t")g(v)n
(ersions)g(of)h(this)g(algorithmn)f(w)n(ould)h(suf-)150
2358 y(fer)j(this)g(\015a)n(w.)57 b(Hop)r(efully)36 b(b)n(y)e(the)h
(time)h(w)n(e)e(submit)150 2457 y(w)n(e)26 b(will)g(ha)n(v)n(e)g
(corrected)e(our)i(stutter)g(issue.)37 b(Accord-)150
2557 y(ing)27 b(to)g(Lo)n(v)n(e,)f(NOOP)h(do)r(es)g(merging)f(though)h
(I)h(can't)150 2657 y(see)37 b(where)g(this)g(o)r(ccurs)g(at)g(all.)66
b(As)37 b(of)g(no)n(w)g(w)n(e)g(do)150 2756 y(not)29
b(ha)n(v)n(e)g(an)n(y)f(in)n(ten)n(tion)i(of)f(implemen)n(ting)h(a)e
(merge)150 2856 y(function.)p 0 TeXcolorgray 0 TeXcolorgray
838 3039 a(References)p 0 TeXcolorgray 150 3240 a
SDict begin H.S end
 150
3240 a 0 TeXcolorgray -19 x Fa(http://code.goog)o(le.)o(co)o(m/)o(p/c)o
(s4)o(11g)o(16)o(/so)o(ur)o(ce)o(/br)o(ow)o(se/)o(br)o(an)o(che)o(s/)o
(pro)o(je)o(ct4)o(/b)o(lo)o(ck/)o(ss)o(tf-)s(io)o(sch)o(ed)o(.c?)o(r=)o
(10)o(0)p 0 TeXcolorgray 4164 3164 a
SDict begin H.R end
 4164 3164 a 4164
3221 a
SDict begin [ /H /I /Border [0 0 0] /Color [0 1 1] /Action << /Subtype /URI /URI (http://code.google.com/p/cs411g16/source/browse/branches/project4/block/sstf-iosched.c?r=100) >> /Subtype /Link H.B /ANN pdfmark end
 4164 3221 a 0 TeXcolorgray 0 TeXcolorgray 150
3339 a
SDict begin H.S end
 150 3339 a 0 TeXcolorgray -18 x Fa(http://searchcod)o(e.c)o(om)o
(/c)o(ode)o(se)o(arc)o(h/)o(vie)o(w/)o(24)o(999)o(10)o(7)p
0 TeXcolorgray 2155 3263 a
SDict begin H.R end
 2155 3263 a 2155 3321 a
SDict begin [ /H /I /Border [0 0 0] /Color [0 1 1] /Action << /Subtype /URI /URI (http://searchcode.com/codesearch/view/24999107\040) >> /Subtype /Link H.B /ANN pdfmark end
 2155
3321 a 0 TeXcolorgray 0 TeXcolorgray 150 3439 a
SDict begin H.S end
 150 3439
a 0 TeXcolorgray -18 x Fa(https://github.c)o(om/)o(ry)o(le)o(yhe)o(rr)o
(ing)o(to)o(n/l)o(in)o(ux)o(_ke)o(rn)o(el_)o(41)o(1/)o(blo)o(b/)o(mas)o
(te)o(r/s)o(st)o(f-)s(io/)o(sst)o(f-)s(ios)o(ch)o(ed.)o(c)p
0 TeXcolorgray 3907 3363 a
SDict begin H.R end
 3907 3363 a 3907 3421 a
SDict begin [ /H /I /Border [0 0 0] /Color [0 1 1] /Action << /Subtype /URI /URI (https://github.com/ryleyherrington/linux_kernel_411/blob/master/sstf-io/sstf-iosched.c) >> /Subtype /Link H.B /ANN pdfmark end
 3907
3421 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 1929 5349 a Fb(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
